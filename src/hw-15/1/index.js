/**
 * Задача 1.
 *
 * Добавьте всем функциям в прототип метод delay(ms).
 *
 * При вызове этого метода, функция, на которой этот метод вызывают,
 * должна быть вызвана отложено, через указанное количество миллисекунд.
 *
 * Если функция, на которой вызывается метод delay(ms) нуждается в аргументах,
 * то их нужно пробросить в аргументы функции, которую возвращает метод delay(ms).
 *
 * func.delay(1000)('value 1', 'value 2').
 *
 * В примере выше аргументы 'value 1' и 'value 2' станут первым и вторым
 * аргументами для функции func.
 *
 * Условия:
 * - количество миллисекунд указывается в первом аргументе метода delay(ms);
 * - возвращаемая методом delay функция должна быть необязательной;
 * - в реализации метода delay(ms) обязательно использовать setTimeout.
 */

// !!! В умові завдання йдеться про ПРТОТИП,
// а у прикладі виконання функції використовується СТАТИЧНИЙ метод функції, що суперечить умові завдання.
/// ПРОВІРИТИ

function delay(time) {
  const _self = this;

  const timer = setTimeout(() => {
    this();
  }, time);

  return function (...rest) {
    clearTimeout(timer);
    setTimeout(() => {
      _self(...rest);
    }, time);
  };
}

function sayHello() {
  console.log("Hello!");
}

// (new sayHello()).delay(); так мало би бути

sayHello.delay = delay; // Це не прототип, це СТАТИЧНИЙ МЕТОД функції

sayHello.delay(1000); /* Выведет "Hello!" через 1 секунду */

function sum(a, b) {
  console.log(a + b);
}
sum.delay = delay;
sum.delay(2000)(5, 2); /* Выведет 7 через 1 секунду. */
